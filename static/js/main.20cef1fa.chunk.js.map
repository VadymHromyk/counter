{"version":3,"sources":["Counter.module.css","components/Button/Button.module.css","components/Display/Display.module.css","components/Button/Button.tsx","components/Display/Display.tsx","components/SetCounterValue/SetCounterValue.tsx","Counter.tsx","App.tsx","reportWebVitals.js","index.js"],"names":["module","exports","Button","props","disabled","isDisabled","onClick","func","className","css","disabled_button","enabled_button","title","Display","main","displayText","count","maxValue","is_max","SetCounterValue","type","value","onChange","e","parseInt","currentTarget","error","incorect_input","Counter","main_containers","container_displays","maxValueBeforeСonfirming","setMaxValueBeforeСonfirming","startValueBeforeСonfirming","setStartValueBeforeСonfirming","container_buttons","addValues","resetSettings","startValue","addNumber","resetNumber","App","useState","setCount","useEffect","countLocalValue","localStorage","getItem","JSON","parse","setItem","stringify","setMaxValue","setStartValue","maxLocalValue","startLocalValue","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.20cef1fa.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"Counter_main__LZMg-\",\"main_containers\":\"Counter_main_containers__32map\",\"container_displays\":\"Counter_container_displays__1K5v_\",\"container_buttons\":\"Counter_container_buttons__iWPIx\",\"incorect_input\":\"Counter_incorect_input__3UNor\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enabled_button\":\"Button_enabled_button__2Duh7\",\"disabled_button\":\"Button_disabled_button__VtWaM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"Display_main__3xBIf\",\"is_max\":\"Display_is_max__3MvMZ\"};","import React from 'react';\r\nimport css from './Button.module.css'\r\n\r\n\r\ntype ButtonType = {\r\n    isDisabled: boolean\r\n    title: string\r\n    func: () => void\r\n}\r\n\r\nconst Button = (props: ButtonType) => {\r\n\r\n    const callBackFn = () => {\r\n        props.func()\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <button disabled={props.isDisabled} onClick={callBackFn}\r\n                    className={props.isDisabled ? css.disabled_button : css.enabled_button}\r\n            >\r\n                {props.title}\r\n            </button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Button;","import React from 'react';\r\nimport css from './Display.module.css'\r\n\r\ntype DisplayType = {\r\n    count: number\r\n    maxValue: number\r\n    displayText: number | 'Incorrect value!' | 'Enter a value!' | 'Please, press \"set\"'\r\n}\r\n\r\nconst Display = (props: DisplayType) => {\r\n\r\n    return (\r\n        <div className={css.main}>\r\n            <p className={\r\n                props.displayText !== 'Please, press \"set\"' ?\r\n                    props.count === props.maxValue ? css.is_max : '' :\r\n                    ''\r\n            }>\r\n                {props.displayText}\r\n            </p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Display;","import React from 'react';\r\nimport css from './../../Counter.module.css'\r\n\r\ntype PropsType = {\r\n    title: string\r\n    value: number\r\n    func: (value: number) => void\r\n    error: boolean\r\n}\r\n\r\nconst SetCounterValue = (props: PropsType) => {\r\n\r\n    return (\r\n        <div>\r\n            <span>{props.title}</span>\r\n            <input type='number'\r\n                   value={props.value}\r\n                   onChange={(e) => {\r\n                       props.func(parseInt(e.currentTarget.value))\r\n                   }}\r\n                   className={props.error ? css.incorect_input : ''}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SetCounterValue;","import React, {useState} from 'react';\r\nimport Button from './components/Button/Button'\r\nimport Display from './components/Display/Display';\r\nimport {CountType} from './App'\r\nimport css from './Counter.module.css'\r\nimport SetCounterValue from './components/SetCounterValue/SetCounterValue';\r\n\r\ntype CounterType = {\r\n    count: CountType\r\n    addNumber: () => void\r\n    resetNumber: () => void\r\n    maxValueBeforeСonfirming: number\r\n    startValueBeforeСonfirming: number\r\n    setMaxValueBeforeСonfirming: (value: number) => void\r\n    setStartValueBeforeСonfirming: (value: number) => void\r\n    addValues: () => void\r\n    resetSettings: () => void\r\n    maxValue: number\r\n    startValue: number\r\n}\r\n\r\nconst Counter = (props: CounterType) => {\r\n\r\n    return (\r\n        <div className={css.main}>\r\n            <div className={css.main_containers}>\r\n                <div className={css.container_displays}>\r\n                    <SetCounterValue title={'Max value: '}\r\n                                     value={props.maxValueBeforeСonfirming}\r\n                                     func={props.setMaxValueBeforeСonfirming}\r\n                                     error={props.startValueBeforeСonfirming >= props.maxValueBeforeСonfirming ||\r\n                                     props.startValueBeforeСonfirming < 0}\r\n                    />\r\n                    <SetCounterValue title={'Start value: '}\r\n                                     value={props.startValueBeforeСonfirming}\r\n                                     func={props.setStartValueBeforeСonfirming}\r\n                                     error={props.startValueBeforeСonfirming >= props.maxValueBeforeСonfirming ||\r\n                                     props.startValueBeforeСonfirming < 0}\r\n                    />\r\n                </div>\r\n                <div className={css.container_buttons}>\r\n                    <Button isDisabled={props.startValueBeforeСonfirming >= props.maxValueBeforeСonfirming ||\r\n                    props.startValueBeforeСonfirming < 0}\r\n                            title={'set'} func={props.addValues}\r\n                    />\r\n                    <Button isDisabled={false} title={'reset settings'} func={props.resetSettings}/>\r\n                </div>\r\n            </div>\r\n            <div className={css.main_containers}>\r\n                <div className={css.container_displays}>\r\n                    <Display\r\n                        displayText={ // && - логічне і    || - логічне або\r\n                            props.maxValueBeforeСonfirming === 0 &&\r\n                            props.startValueBeforeСonfirming === 0 ? 'Enter a value!'\r\n                                :\r\n                                props.startValueBeforeСonfirming >= props.maxValueBeforeСonfirming ||\r\n                                props.startValueBeforeСonfirming < 0 ? 'Incorrect value!'\r\n                                    :\r\n                                    props.maxValue === props.maxValueBeforeСonfirming &&\r\n                                    props.startValue === props.startValueBeforeСonfirming ? props.count\r\n                                        :\r\n                                        'Please, press \"set\"'\r\n                        }\r\n\r\n                        count={props.count}\r\n                        maxValue={props.maxValue}\r\n                    />\r\n                </div>\r\n                <div className={css.container_buttons}>\r\n                    <Button title='inc' func={props.addNumber} isDisabled={props.count === props.maxValue}/>\r\n                    <Button title='reset' func={props.resetNumber} isDisabled={props.count === props.startValue}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Counter;\r\n\r\n/*count={props.startValueBeforeСonfirming >= props.maxValueBeforeСonfirming ||\r\n                props.startValueBeforeСonfirming < 0 ? 'Incorrect value!' : props.count}*/","import React, {useEffect, useState} from 'react';\nimport Counter from './Counter';\n\nexport type CountType = number;\n\nfunction App() {\n// functions for main counter\n    const [count, setCount] = useState<CountType>(0);\n    useEffect(() => {\n        const countLocalValue = localStorage.getItem('count')\n        if (countLocalValue) {\n            setCount(JSON.parse(countLocalValue))\n        }\n    }, [])\n    useEffect(() => {\n        localStorage.setItem('count', JSON.stringify(count))\n    }, [count])\n    const addNumber = () => {\n        setCount(count + 1)\n    }\n    const resetNumber = () => {\n        setCount(startValue);\n    }\n\n// functions for set inputs values\n    const [maxValueBeforeСonfirming, setMaxValueBeforeСonfirming] = useState<CountType>(0);\n    const [maxValue, setMaxValue] = useState<CountType>(0);\n    const [startValueBeforeСonfirming, setStartValueBeforeСonfirming] = useState<CountType>(0);\n    const [startValue, setStartValue] = useState<CountType>(0);\n    useEffect(() => {\n        const maxLocalValue = localStorage.getItem('maxValue')\n        if (maxLocalValue) {\n            setMaxValue(JSON.parse(maxLocalValue));\n            setMaxValueBeforeСonfirming(JSON.parse(maxLocalValue))\n        }\n        let startLocalValue = localStorage.getItem('startValue')\n        if (startLocalValue) {\n            setStartValue(JSON.parse(startLocalValue));\n            setStartValueBeforeСonfirming(JSON.parse(startLocalValue))\n        }\n    }, [])\n    useEffect(() => {\n        localStorage.setItem('maxValue', JSON.stringify(maxValue))\n        localStorage.setItem('startValue', JSON.stringify(startValue))\n    }, [maxValue, startValue])\n    const addValues = () => {\n        setCount(startValueBeforeСonfirming);\n        setStartValue(startValueBeforeСonfirming)\n        setMaxValue(maxValueBeforeСonfirming);\n    }\n\n// function for reset all settings\n    const resetSettings = () => {\n        setCount(0)\n        setMaxValue(0)\n        setStartValue(0)\n        setMaxValueBeforeСonfirming(0)\n        setStartValueBeforeСonfirming(0)\n    }\n\n    return (\n        <div className=\"App\">\n            <Counter\n                count={count}\n                addNumber={addNumber}\n                resetNumber={resetNumber}\n                maxValueBeforeСonfirming={maxValueBeforeСonfirming}\n                startValueBeforeСonfirming={startValueBeforeСonfirming}\n                setMaxValueBeforeСonfirming={setMaxValueBeforeСonfirming}\n                setStartValueBeforeСonfirming={setStartValueBeforeСonfirming}\n                addValues={addValues}\n                resetSettings={resetSettings}\n                maxValue={maxValue}\n                startValue={startValue}\n            />\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.tsx';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}